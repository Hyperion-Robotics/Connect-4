import numpy as np

# for calulations, for exampel with infinity
import math

# for generating random values, for example for 1st turn
import random


# import time
# import curses


# global constant variables
# -------------------------------

# row and column count
ROWS = 6
COLS = 7

# turns
PLAYER_TURN = 0
AI_TURN = 1

# pieces represented as numbers
PLAYER_PIECE = 1
AI_PIECE = 2
CONNECT_4 = 3



#functions to help the algorithm.py communicate with gui.py

def transpose_board(original_board):
        board = [[0 for _ in range(7)] for l in range(6)]
        for y in range(6):
            for x in range(7):
                # print(f"x:{x}, y:{y}")
                board[5-y][x] = original_board[x][y]
        return board


  
    
def reverse_transpose_board(transposed_board):
    board = [[0 for _ in range(6)] for l in range(7)]
    for y in range(6):
        for x in range(7):
            board[x][5-y] = transposed_board[y][x]


    return board


def convert_board(board, player_color):
    # Create a new board to store the converted values
    converted_board = [[0] * len(board[0]) for _ in range(len(board))]
    
    # Define the conversion mapping based on player_color
    if player_color == "purple":
        conversion = {'P': 1, 'B': 2}
    elif player_color == "blue":
        conversion = {'B': 1, 'P': 2}
    else:
        raise ValueError("Invalid player color. Must be 'purple' or 'blue'.")

    # Traverse the board and convert "P" and "B" based on the mapping
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] in conversion:
                converted_board[i][j] = conversion[board[i][j]]
            else:
                converted_board[i][j] = board[i][j]  # Keep 0s as they are

    return converted_board

def reverse_convert_board(converted_board, player_color):
    # Create a new board to store the reconverted values
    original_board = [[0] * len(converted_board[0]) for _ in range(len(converted_board))]
    
    # Define the reverse conversion mapping based on player_color
    if player_color == "purple":
        reverse_conversion = {1: 'P', 2: 'B', 3: 'Y'}
    elif player_color == "blue":
        reverse_conversion = {1: 'B', 2: 'P', 3: 'Y'}
    else:
        raise ValueError("Invalid player color. Must be 'purple' or 'blue'.")

    # Traverse the board and reconvert 1, 2, and 3 based on the mapping
    for i in range(len(converted_board)):
        for j in range(len(converted_board[0])):
            # Check if the value is in the reverse_conversion mapping
            if converted_board[i][j] in reverse_conversion:
                original_board[i][j] = reverse_conversion[converted_board[i][j]]
            else:
                # Keep other values (like 0) as they are
                original_board[i][j] = converted_board[i][j]  

    return original_board


def encrypt(board, player_color):
    # print(board)
    board=transpose_board(board)
    # print(board)
    board=convert_board(board, player_color)
    # print(board)
    board = np.array(board)

    print("NEW\n")
    print(board)

    return board

def dencrypt(board, player_color):
    board = board.tolist()
    print(board)
    board=reverse_transpose_board(board)
    print(board)
    board=reverse_convert_board(board, player_color)
    print(board)
    

    return board





# various functions used by the game
# -------------------------------

# add a piece to a given location, i.e., set a position in the matrix as 1 or 2
def drop_piece(board, row, col, piece):
    board[row][col] = piece


# checking that the top row of the selected column is still not filled
# i.e., that there is still space in the current column
# note that indexing starts at 0
def is_valid_location(board, col):
    return board[0][col] == 0


# checking where the piece will fall in the current column
# i.e., finding the first zero row in the given column
def get_next_open_row(board, col):
    for r in range(ROWS-1, -1, -1):
        if board[r][col] == 0:
            return r


# calculating if the current state of the board for player or AI is a win
def winning_move(board, piece):
    # checking horizontal 'windows' of 4 for win
    for c in range(COLS-3):
        for r in range(ROWS):
            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:

                return True

    # checking vertical 'windows' of 4 for win
    for c in range(COLS):
        for r in range(ROWS-3):
            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece:
                return True

    # checking positively sloped diagonals for win
    for c in range(COLS-3):
        for r in range(3, ROWS):
            if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:
                return True

    # checking negatively sloped diagonals for win
    for c in range(3,COLS):
        for r in range(3, ROWS):
            if board[r][c] == piece and board[r-1][c-1] == piece and board[r-2][c-2] == piece and board[r-3][c-3] == piece:
                return True
    
    return False


# calculating if the current state of the board for player or AI is a win
def get_completed_game_board(board):
    piece = PLAYER_PIECE
    
    # Checking horizontal 'windows' of 4 for win
    for c in range(COLS - 3):
        for r in range(ROWS):
            if board[r][c] == piece and board[r][c + 1] == piece and board[r][c + 2] == piece and board[r][c + 3] == piece:
                board[r][c] = CONNECT_4
                board[r][c + 1] = CONNECT_4
                board[r][c + 2] = CONNECT_4
                board[r][c + 3] = CONNECT_4
                return board

    # Checking vertical 'windows' of 4 for win
    for c in range(COLS):
        for r in range(ROWS - 3):
            if board[r][c] == piece and board[r + 1][c] == piece and board[r + 2][c] == piece and board[r + 3][c] == piece:
                board[r][c] = CONNECT_4
                board[r + 1][c] = CONNECT_4
                board[r + 2][c] = CONNECT_4
                board[r + 3][c] = CONNECT_4
                return board

    # Checking positively sloped diagonals for win
    for c in range(COLS - 3):
        for r in range(3, ROWS):
            if board[r][c] == piece and board[r - 1][c + 1] == piece and board[r - 2][c + 2] == piece and board[r - 3][c + 3] == piece:
                board[r][c] = CONNECT_4
                board[r - 1][c + 1] = CONNECT_4
                board[r - 2][c + 2] = CONNECT_4
                board[r - 3][c + 3] = CONNECT_4
                return board

    # Checking negatively sloped diagonals for win
    for c in range(3, COLS):
        for r in range(3, ROWS):
            if board[r][c] == piece and board[r - 1][c - 1] == piece and board[r - 2][c - 2] == piece and board[r - 3][c - 3] == piece:
                board[r][c] = CONNECT_4
                board[r - 1][c - 1] = CONNECT_4
                board[r - 2][c - 2] = CONNECT_4
                board[r - 3][c - 3] = CONNECT_4
                return board

    piece = AI_PIECE

    # Repeat the same checks for AI piece
    for c in range(COLS - 3):
        for r in range(ROWS):
            if board[r][c] == piece and board[r][c + 1] == piece and board[r][c + 2] == piece and board[r][c + 3] == piece:
                board[r][c] = CONNECT_4
                board[r][c + 1] = CONNECT_4
                board[r][c + 2] = CONNECT_4
                board[r][c + 3] = CONNECT_4
                return board

    for c in range(COLS):
        for r in range(ROWS - 3):
            if board[r][c] == piece and board[r + 1][c] == piece and board[r + 2][c] == piece and board[r + 3][c] == piece:
                board[r][c] = CONNECT_4
                board[r + 1][c] = CONNECT_4
                board[r + 2][c] = CONNECT_4
                board[r + 3][c] = CONNECT_4
                return board

    for c in range(COLS - 3):
        for r in range(3, ROWS):
            if board[r][c] == piece and board[r - 1][c + 1] == piece and board[r - 2][c + 2] == piece and board[r - 3][c + 3] == piece:
                board[r][c] = CONNECT_4
                board[r - 1][c + 1] = CONNECT_4
                board[r - 2][c + 2] = CONNECT_4
                board[r - 3][c + 3] = CONNECT_4
                return board

    for c in range(3, COLS):
        for r in range(3, ROWS):
            if board[r][c] == piece and board[r - 1][c - 1] == piece and board[r - 2][c - 2] == piece and board[r - 3][c - 3] == piece:
                board[r][c] = CONNECT_4
                board[r - 1][c - 1] = CONNECT_4
                board[r - 2][c - 2] = CONNECT_4
                board[r - 3][c - 3] = CONNECT_4
                return board

    return board 



# evaluate a 'window' of 4 locations in a row based on what pieces it contains
# the values used can be experimented with
def evaluate_window(window, piece):
    # by default the oponent is the player
    opponent_piece = PLAYER_PIECE

    # if we are checking from the player's perspective, then the oponent is AI
    if piece == PLAYER_PIECE:
        opponent_piece = AI_PIECE

    # initial score of a window is 0
    score = 0

    # based on how many friendly pieces there are in the window, we increase the score
    if window.count(piece) == 4:
        score += 100
    elif window.count(piece) == 3 and window.count(0) == 1:
        score += 5
    elif window.count(piece) == 2 and window.count(0) == 2:
        score += 2

    # or decrese it if the oponent has 3 in a row
    if window.count(opponent_piece) == 3 and window.count(0) == 1:
        score -= 4 

    return score    


# scoring the overall attractiveness of a board after a piece has been droppped
def score_position(board, piece):

    score = 0

    # score center column --> we are prioritizing the central column because it provides more potential winning windows
    center_array = [int(i) for i in list(board[:,COLS//2])]
    center_count = center_array.count(piece)
    score += center_count * 6

    # below we go over every single window in different directions and adding up their values to the score
    # score horizontal
    for r in range(ROWS):
        row_array = [int(i) for i in list(board[r,:])]
        for c in range(COLS - 3):
            window = row_array[c:c + 4]
            score += evaluate_window(window, piece)

    # score vertical
    for c in range(COLS):
        col_array = [int(i) for i in list(board[:,c])]
        for r in range(ROWS-3):
            window = col_array[r:r+4]
            score += evaluate_window(window, piece)

    # score positively sloped diagonals
    for r in range(3,ROWS):
        for c in range(COLS - 3):
            window = [board[r-i][c+i] for i in range(4)]
            score += evaluate_window(window, piece)

    # score negatively sloped diagonals
    for r in range(3,ROWS):
        for c in range(3,COLS):
            window = [board[r-i][c-i] for i in range(4)]
            score += evaluate_window(window, piece)

    return score

# checking if the given turn or in other words node in the minimax tree is terminal
# a terminal node is player winning, AI winning or board being filled up
def is_terminal_node(board):
    return winning_move(board, PLAYER_PIECE) or winning_move(board, AI_PIECE) or len(get_valid_locations(board)) == 0


# The algorithm calculating the best move to make given a depth of the search tree.
# Depth is how many layers algorithm scores boards. Complexity grows exponentially.
# Alpha and beta are best scores a side can achieve assuming the opponent makes the best play.
# More on alpha-beta pruning here: https://www.youtube.com/watch?v=l-hh51ncgDI.
# maximizing_palyer is a boolean value that tells whether we are maximizing or minimizing
# in this implementation, AI is maximizing.
def minimax(board, depth, alpha, beta, maximizing_player):

    # all valid locations on the board
    valid_locations = get_valid_locations(board)

    # boolean that tells if the current board is terminal
    is_terminal = is_terminal_node(board)

    # if the board is terminal or depth == 0
    # we score the win very high and a draw as 0
    if depth == 0 or is_terminal:
        if is_terminal: # winning move 
            if winning_move(board, AI_PIECE):
                return (None, 10000000)
            elif winning_move(board, PLAYER_PIECE):
                return (None, -10000000)
            else:
                return (None, 0)
        # if depth is zero, we simply score the current board
        else: # depth is zero
            return (None, score_position(board, AI_PIECE))

    # if the current board is not rerminal and we are maximizing
    if maximizing_player:

        # initial value is what we do not want - negative infinity
        value = -math.inf

        # this will be the optimal column. Initially it is random
        column = random.choice(valid_locations)

        # for every valid column, we simulate dropping a piece with the help of a board copy
        # and run the minimax on it with decresed depth and switched player
        for col in valid_locations:
            row = get_next_open_row(board, col)
            b_copy = board.copy()
            drop_piece(b_copy, row, col, AI_PIECE)
            # recursive call
            new_score = minimax(b_copy, depth-1, alpha, beta, False)[1]
            # if the score for this column is better than what we already have
            if new_score > value:
                value = new_score
                column = col
            # alpha is the best option we have overall
            alpha = max(value, alpha) 
            # if alpha (our current move) is greater (better) than beta (opponent's best move), then 
            # the oponent will never take it and we can prune this branch
            if alpha >= beta:
                break

        return column, value
    
    # same as above, but for the minimizing player
    else: # for thte minimizing player
        value = math.inf
        column = random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            b_copy = board.copy()
            drop_piece(b_copy, row, col, PLAYER_PIECE)
            new_score = minimax(b_copy, depth-1, alpha, beta, True)[1]
            if new_score < value:
                value = new_score
                column = col
            beta = min(value, beta) 
            if alpha >= beta:
                break
        return column, value


# get all columns where a piece can be
def get_valid_locations(board):
    valid_locations = []
    
    for column in range(COLS):
        if is_valid_location(board, column):
            valid_locations.append(column)

    return valid_locations

